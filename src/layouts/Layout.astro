---
import {
  Box,
  Container,
  Flex,
  Theme,
  type ContainerProps,
} from "@radix-ui/themes";
import "@radix-ui/themes/styles.css";
import { ViewTransitions, fade } from "astro:transitions";

import { getImage } from "astro:assets";
import { Debug } from "astro:components";
import { getEntry } from "astro:content";
import { Graphic } from "../components/client/Graphic/Graphic";
import { MDXColumns } from "../components/client/MDX/mdx-components/ui/MDXColumns";
import { MDXDivider } from "../components/client/MDX/mdx-components/ui/MDXDivider";
import Banner from "../components/server/Banner/Banner.astro";
import Footer from "../components/server/Footer/Footer.astro";
import { Header } from "../components/server/Header/Header";
import LogoSrc from "../components/server/Header/logo.png";
import { Colors } from "../domains/colors/colors";
import { getTheme, type ThemeType } from "../domains/utils/getTheme";
import "./index.css";

type Props = {
  title: Array<string> | undefined;
  description: string | undefined;

  size?: ContainerProps["size"];

  maxWidth?: ContainerProps["maxWidth"];

  withOgImage?: boolean;
  withDefaultBanner?: boolean;

  headingFont?: string;
  bodyFont?: string;
  theme?: ThemeType;
};

const props = Astro.props;

const titleArray = props.title ? [...props.title, "Keeper"] : ["Keeper"];
const title = titleArray.join(" â€¢ ");
const description =
  "The ultimate TTRPG toolbox. Roll dice, store characters, and design your own worlds.";
const headingFont = props.headingFont;
const bodyFont = props.bodyFont;

const songsAndSagas = await getEntry("games", "fari-rpgs/songs-and-sagas");

const fontsAsString = [headingFont, bodyFont]
  .filter((font) => font !== undefined)
  .map((font) => `family=${font!.trim()}`)
  .join("&");

const themeProps = getTheme({
  theme: props.theme,
});

const googleFontUrl =
  fontsAsString &&
  encodeURI(`https://fonts.googleapis.com/css2?${fontsAsString}&display=swap`);

const ogImageUrl = props.withOgImage
  ? `${Astro.url.origin}/` +
    ["og", Astro.url.pathname, "image.png"]
      // remove all extra slashes
      .join("/")
      .split("/")
      .filter((part) => part !== "")
      .join("/")
  : "";
---

<!doctype html>
<html
  lang="en"
  transition:animate={fade({ duration: ".150s" })}
  class="mb-[10rem]"
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href={"/keeper/favicon.svg"} />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <meta
      name="theme-color"
      content={Colors.getDarkColor(themeProps.accentColor, 9)}
    />

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    {googleFontUrl && <link href={googleFontUrl} rel="stylesheet" />}

    <!-- HTML Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    {ogImageUrl && <meta property="og:image" content={ogImageUrl} />}

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content={Astro.url.host} />
    <meta property="twitter:url" content={Astro.url.href} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    {ogImageUrl && <meta name="twitter:image" content={ogImageUrl} />}

    <!-- Meta Tags Generated via https://www.opengraph.xyz -->

    <!-- Theme -->
    <script is:inline>
      // get theme
      let theme = undefined;
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        theme = localStorage.getItem("theme");
      } else {
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          theme = "dark";
        } else {
          theme = "light";
        }
      }
      // update html + localStorage
      if (theme === "light") {
        document.documentElement.classList.add("light");
        document.documentElement.classList.remove("dark");
      } else {
        document.documentElement.classList.add("dark");
        document.documentElement.classList.remove("light");
      }

      window.localStorage.setItem("theme", theme);
    </script>

    <!-- Animation -->
    <ViewTransitions />
  </head>
  <Theme {...themeProps}>
    <body>
      <Container
        px={{
          initial: "6",
          md: "9",
        }}
        size={props.size || "4"}
        maxWidth={props.maxWidth || undefined}
      >
        <Graphic
          accentColor={themeProps.accentColor}
          style={{
            zIndex: -1,
            opacity: 0.25,
          }}
        />
        <Header client:load theme={themeProps} />
        {
          props.withDefaultBanner && (
            <Banner src={songsAndSagas.data.image!} alt={"Background"} />
          )
        }
      </Container>
      <Container
        px={{
          initial: "6",
          md: "9",
        }}
        size={props.size || "4"}
        maxWidth={props.maxWidth || undefined}
      >
        <main>
          <Flex direction="column" gap="5">
            <slot />
          </Flex>
        </main>
      </Container>
      <Container
        px={{
          initial: "6",
          md: "9",
        }}
        size={props.size || "4"}
        maxWidth={props.maxWidth || undefined}
      >
        <Footer ogImageUrl={ogImageUrl} />
        {
          import.meta.env.DEV && (
            <Box>
              <Box className="my-[10rem]">
                <MDXDivider />
              </Box>
              <MDXColumns>
                <Debug
                  debug={{
                    title,
                    description,
                    props,
                  }}
                />
                {ogImageUrl && (
                  <img src={ogImageUrl} alt="open graph" class="h-max w-full" />
                )}
              </MDXColumns>
            </Box>
          )
        }
      </Container>
    </body>

    <style is:global>
      /* GLOBAL TAGS */
      html {
        scroll-behavior: smooth;
      }
      body {
        position: relative;
      }
      /* ASTRO DEBUG */
      .astro-debug {
        background: none !important;
      }

      .astro-code {
        border: none !important;
      }

      html.dark {
        --pagefind-ui-primary: #eeeeee;
        --pagefind-ui-text: #eeeeee;
        --pagefind-ui-background: #152028;
        --pagefind-ui-border: #152028;
        --pagefind-ui-tag: #152028;
      }
    </style>
    <style
      is:global
      define:vars={{
        headingFont,
      }}
    >
      .radix-themes {
        --heading-font-family: var(
          --headingFont
        ); /* Your custom font for <Heading> components */
      }
    </style>
    <style
      is:global
      define:vars={{
        bodyFont,
      }}
    >
      .radix-themes {
        /* FONT  */
        --default-font-family: var(--bodyFont); /* Your custom default font */
        --code-font-family: var(
          --bodyFont
        ); /* Your custom font for <Code> components */
        --strong-font-family: var(
          --bodyFont
        ); /* Your custom font for <Strong> components */
        --em-font-family: var(
          --bodyFont
        ); /* Your custom font for <Em> components */
        --quote-font-family: var(
          --bodyFont
        ); /* Your custom font for <Quote> components */

        /* CURSORS */
        --cursor-button: pointer;
        --cursor-checkbox: default;
        --cursor-disabled: not-allowed;
        --cursor-link: pointer;
        --cursor-menu-item: default;
        --cursor-radio: default;
        --cursor-slider-thumb: default;
        --cursor-slider-thumb-active: default;
        --cursor-switch: default;
      }
    </style>
  </Theme>
</html>
