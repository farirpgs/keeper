---
import { Box, Container, Flex, Heading, Theme } from "@radix-ui/themes";
import "@radix-ui/themes/styles.css";
import SpeedInsights from "@vercel/speed-insights/astro";
import { ViewTransitions, fade } from "astro:transitions";

import Banner from "../components/server/Banner/Banner.astro";
import Header from "../components/server/Header/Header.astro";
import { getTheme, type ThemeType } from "../domains/utils/getTheme";

import { Debug } from "astro:components";
import { getEntry } from "astro:content";
import { Graphic } from "../components/client/Graphic/Graphic";
import { MDXColumns } from "../components/client/MDX/mdx-components/ui/MDXColumns";
import { MDXDivider } from "../components/client/MDX/mdx-components/ui/MDXDivider";
import Footer from "../components/server/Footer/Footer.astro";
import "./index.css";

type Props = {
  title: Array<string> | undefined;
  description: string | undefined;
  h1?: string;
  headingFont?: string;
  bodyFont?: string;
  withBanner?: boolean;
  theme?: ThemeType;
};

const props = Astro.props;

const titleArray = props.title ? [...props.title, "Keeper"] : ["Keeper"];
const title = titleArray.join(" â€¢ ");
const description =
  "The best way to play your favorite TTRPGs. Hundreds of games you can play right here in your browser. Accessible, fast, and free.";
const headingFont = props.headingFont;
const bodyFont = props.bodyFont;

const songsAndSagas = await getEntry("games", "fari-rpgs/songs-and-sagas");

// family = ,
const fontsAsString = [headingFont, bodyFont]
  .filter((font) => font !== undefined)
  .map((font) => `family=${font!.trim()}`)
  .join("&");

const themeProps = getTheme({
  theme: props.theme,
});

const googleFontUrl =
  fontsAsString &&
  encodeURI(`https://fonts.googleapis.com/css2?${fontsAsString}&display=swap`);

const ogImageUrl =
  "/" +
  ["og", Astro.url.pathname, "image.png"]
    // remove all extra slashes
    .join("/")
    .split("/")
    .filter((part) => part !== "")
    .join("/");
---

<!doctype html>
<html
  lang="en"
  transition:animate={fade({ duration: ".150s" })}
  class="mb-[10rem]"
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    {googleFontUrl && <link href={googleFontUrl} rel="stylesheet" />}
    <meta name="generator" content={Astro.generator} />

    <!-- HTML Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImageUrl} />

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content={Astro.url.host} />
    <meta property="twitter:url" content={Astro.url.href} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImageUrl} />

    <!-- Meta Tags Generated via https://www.opengraph.xyz -->

    <ViewTransitions />
  </head>
  <Theme {...themeProps}>
    <body>
      <Container
        px={{
          initial: "6",
          md: "9",
        }}
        maxWidth={"1204px"}
      >
        <Graphic />
        <Header />
        {
          props.withBanner && (
            <Banner
              src={songsAndSagas.data.image!}
              alt={"Background"}
              alt="Keeper"
              justBackground
            />
          )
        }
        <main>
          <Flex direction="column" gap="5">
            {props.h1 && <Heading size="9">{props.h1}</Heading>}
            <slot />
          </Flex>
        </main>
        <Footer ogImageUrl={ogImageUrl} />
        {
          import.meta.env.DEV && (
            <Box>
              <Box className="my-[10rem]">
                <MDXDivider />
              </Box>
              <MDXColumns>
                <Debug
                  debug={{
                    title,
                    description,
                    props,
                  }}
                />
                <img src={ogImageUrl} alt="og image" class="h-max w-full" />
              </MDXColumns>
            </Box>
          )
        }
      </Container>
    </body>
    <SpeedInsights />
  </Theme>

  <style is:global>
    html {
    }
    body {
      position: relative;
    }
    .astro-debug {
      background: none !important;
    }
  </style>
  <style
    is:global
    define:vars={{
      headingFont,
    }}
  >
    .radix-themes {
      --heading-font-family: var(
        --headingFont
      ); /* Your custom font for <Heading> components */
    }
  </style>
  <style
    is:global
    define:vars={{
      bodyFont,
    }}
  >
    .radix-themes {
      --default-font-family: var(--bodyFont); /* Your custom default font */

      --code-font-family: var(
        --bodyFont
      ); /* Your custom font for <Code> components */
      --strong-font-family: var(
        --bodyFont
      ); /* Your custom font for <Strong> components */
      --em-font-family: var(
        --bodyFont
      ); /* Your custom font for <Em> components */
      --quote-font-family: var(
        --bodyFont
      ); /* Your custom font for <Quote> components */
    }
  </style>
</html>
