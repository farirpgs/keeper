---
import type {
  GetStaticPathsItem,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import { getImage } from "astro:assets";
import { DLAstro } from "../../../domains/dl/DLAstro";
import { shuffleWithSeed } from "../../../domains/dl/shuffleWithSeed";
import { getTheme } from "../../../domains/utils/getTheme";
import Layout from "../../../layouts/Layout.astro";
import { CreatorRoute } from "../../../routes/CreatorRoute/CreatorRoute";

export type Params = InferGetStaticParamsType<typeof getStaticPaths>;
export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const props = Astro.props as Props;
const params = Astro.params as Params;

const { creator, games, resources } = await DLAstro.getCreator({
  id: params.creatorSlug,
  includeGames: true,
  includeResources: true,
});

const currentDateOfTheMonth = new Date().getDate();
const shuffledGames = shuffleWithSeed(games, currentDateOfTheMonth);
const sortedGames = shuffledGames.sort((a, b) => b.data.weight - a.data.weight);
for (const game of sortedGames) {
  if (game.data.image) {
    const optimizedImage = await getImage({
      src: game.data.image,
      format: "webp",
      quality: "low",
    });
    game.data._optimizedImageSrc = optimizedImage.src;
  }
}

const shuffledResources = shuffleWithSeed(resources, currentDateOfTheMonth);
const sortedResources = shuffledResources.sort(
  (a, b) => b.data.weight - a.data.weight
);
for (const resource of sortedResources) {
  if (resource.data.image) {
    const optimizedImage = await getImage({
      src: resource.data.image,
      format: "webp",
      quality: "low",
    });
    resource.data._optimizedImageSrc = optimizedImage.src;
  }
}

const theme = getTheme({ theme: {} });

export async function getStaticPaths() {
  const { creators } = await DLAstro.getAllCreators();
  return creators.map((creator) => {
    return {
      params: { creatorSlug: creator.id },
    } satisfies GetStaticPathsItem;
  });
}
---

<Layout
  withOgImage
  title={[creator.data.name]}
  description={creator.data.description}
  theme={theme}
>
  <CreatorRoute
    client:load
    creator={creator}
    games={sortedGames}
    resources={sortedResources}
  />
</Layout>
