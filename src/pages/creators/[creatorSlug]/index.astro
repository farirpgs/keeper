---
import { Flex, Grid, Heading } from "@radix-ui/themes";
import type {
  GetStaticPathsItem,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import { Image } from "astro:assets";
import { Card } from "../../../components/client/Card/Card";
import {
  MDXWrapper,
  getMdxComponents,
} from "../../../components/client/MDX/MDX";
import { AppUrl } from "../../../domains/app-url/AppUrl";
import { Colors, type ColorType } from "../../../domains/colors/colors";
import { DLAstro } from "../../../domains/dl/DLAstro";
import { getTheme } from "../../../domains/utils/getTheme";
import { getRandomElement } from "../../../domains/utils/random";
import Layout from "../../../layouts/Layout.astro";

export type Params = InferGetStaticParamsType<typeof getStaticPaths>;
export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const props = Astro.props as Props;
const params = Astro.params as Params;

const { creator, games, resources } = await DLAstro.getCreator({
  slug: props.creatorSlug,
  includeGames: true,
  includeResources: true,
});

const { Content } = await creator.render();

const theme = getTheme({
  theme: {},
});

export async function getStaticPaths() {
  const { creators } = await DLAstro.getAllCreators();
  return creators.map((creator) => {
    return {
      params: {
        creatorSlug: creator.slug,
      },
      props: {
        creatorSlug: creator.slug,
      },
    } satisfies GetStaticPathsItem;
  });
}
---

<Layout
  withOgImage
  title={[creator.data.name]}
  description={creator.data.description}
  theme={theme}
>
  <Flex direction="column" gap="5">
    <Heading size="9">{creator.data.name}</Heading>

    <MDXWrapper>
      <Content
        components={{
          ...getMdxComponents({}),
        }}
      />
    </MDXWrapper>
    {
      games.length && (
        <>
          <Heading size="8">Games</Heading>

          <Grid
            columns={{
              sm: "2",
              lg: "3",
            }}
            gap="6"
            width="auto"
          >
            {games.map((game) => {
              return (
                <Card
                  client:idle
                  href={AppUrl.game({ slug: game.slug })}
                  title={game.data.name}
                  subtitle={creator.data.name}
                  accentColor={
                    game.data.image === undefined
                      ? getRandomElement<ColorType>(
                          Colors.getAccentColors() as any,
                          game.data.name
                        )
                      : undefined
                  }
                >
                  {game.data.image && (
                    <Image
                      quality={"low"}
                      loading={"eager"}
                      src={game.data.image}
                      alt={game.data.name}
                      style={{
                        position: "absolute",
                        objectFit: "cover",
                        objectPosition: "left",
                        width: "100%",
                        height: "100%",
                      }}
                    />
                  )}
                </Card>
              );
            })}
          </Grid>
        </>
      )
    }
    {
      resources.length && (
        <>
          <Heading size="8">Resources</Heading>

          <Grid
            columns={{
              sm: "2",
              lg: "3",
            }}
            gap="6"
            width="auto"
          >
            {resources.map((resource) => {
              return (
                <Card
                  client:idle
                  href={AppUrl.resource({ slug: resource.slug })}
                  title={resource.data.name}
                  subtitle={creator.data.name}
                  accentColor={
                    resource.data.image === undefined
                      ? getRandomElement<ColorType>(
                          Colors.getAccentColors() as any,
                          resource.data.name
                        )
                      : undefined
                  }
                >
                  {resource.data.image && (
                    <Image
                      quality={"low"}
                      loading={"eager"}
                      src={resource.data.image}
                      alt={resource.data.name}
                      style={{
                        position: "absolute",
                        objectFit: "cover",
                        objectPosition: "left",
                        width: "100%",
                        height: "100%",
                      }}
                    />
                  )}
                </Card>
              );
            })}
          </Grid>
        </>
      )
    }
  </Flex>
</Layout>
