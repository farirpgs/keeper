---
import type {
  GetStaticPathsItem,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import { Image } from "astro:assets";
import Banner from "../../../../components/server/Banner/Banner.astro";
import { DLAstro } from "../../../../domains/dl/DLAstro";
import { DocParser } from "../../../../domains/document/DocParser";
import { getTheme } from "../../../../domains/utils/getTheme";
import Layout from "../../../../layouts/Layout.astro";
import { ResourceRoute } from "../../../../routes/ResourceRoute/ResourceRoute";
export type Params = InferGetStaticParamsType<typeof getStaticPaths>;
export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const props = Astro.props as Props;
const params = Astro.params as Params;

const { creator, resource } = await DLAstro.getResource({
  slug: props.resourceSlug,
  includeCreator: true,
});

const theme = getTheme({
  theme: {
    accentColor: resource.data.theme?.accentColor,
  },
});

const parser = new DocParser({
  markdown: resource.body,
});
const doc = parser.getDoc();

const MDXContent = await parser.getMDXContent();

export async function getStaticPaths() {
  const { resources } = await DLAstro.getAllResourcesWithCreator({});
  return resources.map((item) => {
    const [creatorSegment, resourceSegment, languageSegment] =
      item.resource.slug.split("/");

    const resourceSlug = languageSegment
      ? `${resourceSegment}.${languageSegment}`
      : resourceSegment;

    return {
      params: {
        creatorSlug: item.creator.slug,
        resourceSlug: resourceSlug,
      },
      props: {
        creatorSlug: item.creator.slug,
        resourceSlug: item.resource.slug,
      },
    } satisfies GetStaticPathsItem;
  });
}
---

<Layout
  title={[doc.currentPage?.title || "", resource.data.name]}
  description={doc.currentPage?.content}
  theme={theme}
  withOgImage
>
  <ResourceRoute
    client:load
    creator={creator!}
    resource={resource}
    theme={theme}
    doc={doc}
    pathname={Astro.url.pathname}
    content={doc.currentPage?.content}
  >
    {
      resource.data.image && (
        <Banner src={resource.data.image} alt={resource.data.name} />
      )
    }
    {
      resource.data.image && (
        <Image
          src={resource.data.image}
          alt={resource.data.name}
          slot="image"
        />
      )
    }
  </ResourceRoute>
</Layout>
