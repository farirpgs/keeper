---
import type {
  GetStaticPathsItem,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import Banner from "../../../../../components/server/Banner/Banner.astro";
import { DLAstro } from "../../../../../domains/dl/DLAstro";
import { getTheme } from "../../../../../domains/utils/getTheme";
import Layout from "../../../../../layouts/Layout.astro";
import { Page } from "./_page";

export type Params = InferGetStaticParamsType<typeof getStaticPaths>;
export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const props = Astro.props as Props;
const params = Astro.params as Params;

const theme = getTheme({
  theme: {
    accentColor: props.game.data.theme?.accentColor,
  },
});

const currentAsset = props.assets.find((asset) => {
  return (
    asset.slug ===
    `${params.creatorSlug}/${params.gameSlug}/${params.assetSlug}`
  );
});

export async function getStaticPaths() {
  const { games } = await DLAstro.getAllGamesWithCreator({
    includeAssets: true,
  });

  return games.flatMap((item) => {
    return item.assets.map((asset) => {
      return {
        params: {
          creatorSlug: item.creator.slug,
          gameSlug: item.game.slug.split("/").pop(),
          assetSlug: asset.slug.split("/").pop(),
        },
        props: {
          game: item.game,
          creator: item.creator,
          assets: item.assets,
        },
      } satisfies GetStaticPathsItem;
    });
  });
}
---

<Layout
  ogImage
  theme={theme}
  title={[
    currentAsset!.data.name,
    props.game.data.name,
    props.creator.data.name,
  ]}
  size="3"
  description={currentAsset!.data.description}
  headingFont={props.game.data.theme?.headingFont}
  bodyFont={props.game.data.theme?.bodyFont}
>
  {
    props.game.data.image && (
      <Banner src={props.game.data.image} alt={props.game.data.name} />
    )
  }
  <Page
    client:load
    theme={theme}
    game={props.game}
    creator={props.creator}
    assets={props.assets}
    currentAsset={currentAsset}
  />
</Layout>
