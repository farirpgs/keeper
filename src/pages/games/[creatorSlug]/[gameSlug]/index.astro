---
import type {
  GetStaticPathsItem,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import {
  MDXWrapper,
  getMdxComponents,
} from "../../../../components/client/MDX/MDX";
import Banner from "../../../../components/server/Banner/Banner.astro";
import { DLAstro } from "../../../../domains/dl/DLAstro";
import { evaluateMdxSync } from "../../../../domains/mdx/evaluateMdx";
import { getTheme } from "../../../../domains/utils/getTheme";
import Layout from "../../../../layouts/Layout.astro";
import { GameRoute } from "../../../../routes/GameRoute/GameRoute";

export type Params = InferGetStaticParamsType<typeof getStaticPaths>;
export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const props = Astro.props as Props;
const params = Astro.params as Params;

const { creator } = await DLAstro.getCreator({ id: params.creatorSlug });
const { game } = await DLAstro.getGame({
  id: (params.creatorSlug +
    "/" +
    params.gameSlug) as CollectionEntry<"games">["id"],
});
const { assets } = await DLAstro.getAssetsForGame({
  id: (params.creatorSlug +
    "/" +
    params.gameSlug) as CollectionEntry<"games">["id"],
});

const MDXContent = evaluateMdxSync({
  mdx: game.body,
});

const theme = getTheme({
  theme: {
    accentColor: game.data.theme?.accentColor,
  },
});

export async function getStaticPaths() {
  const { games } = await DLAstro.getAllGamesWithCreator({});
  return games.map((item) => {
    return {
      params: {
        creatorSlug: item.creator.id,
        gameSlug: item.game.id.split("/").pop(),
      },
    } satisfies GetStaticPathsItem;
  });
}
---

<Layout
  withOgImage
  theme={theme}
  title={[game.data.name, creator.data.name]}
  description={game.data.description}
  headingFont={game.data.theme?.headingFont}
  bodyFont={game.data.theme?.bodyFont}
>
  {game.data.image && <Banner src={game.data.image} alt={game.data.name} />}
  <GameRoute
    client:load
    theme={theme}
    game={game}
    creator={creator}
    assets={assets}
  >
    <div slot="gameCover">
      {
        game.data.image && (
          <Image
            class={"rounded-lg"}
            src={game.data.image}
            alt={game.data.name}
            width={1200}
          />
        )
      }
    </div>
    <MDXWrapper>
      <MDXContent
        components={{
          ...getMdxComponents({}),
        }}
      />
    </MDXWrapper>
  </GameRoute>
</Layout>
